Specification "tutorial".

Close nat.

Theorem preservation : forall M T M',
  {of M T} -> {step M M'} ->
    {of M' T}.
induction on 2. intros. case H2.
  case H1. apply IH to H4 H3. search.
  case H1. apply IH to H4 H3. search.
  case H1. apply IH to H6 H4. search.
  case H1. case H4. inst H6 with n1 = M2. cut H7 with H5. search.

Theorem progress : forall M T,
  {of M T} ->
    {val M} \/ exists M', {step M M'}.
induction on 1. intros. case H1.
  search.
  apply IH to H2. case H3.
    search.
    search.
  search.
  apply IH to H2. case H4.
    apply IH to H3. case H6.
      case H5.
        case H2.
        case H2.
        search.
      search.
    search.


Theorem sum_exists : forall N1 N2,
  {is_nat N1} ->
    exists N3, {sum N1 N2 N3}.
induction on 1. intros. case H1.
  search.
  apply IH to H2 with N2 = N2. search.
  
Theorem sum_unique : forall N1 N2 N3 N3',
  {sum N1 N2 N3} -> {sum N1 N2 N3'} ->
    N3 = N3'.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to H3 H4. search.
  

Theorem sum_nat : forall N1 N2 N3,
  {is_nat N1} -> {is_nat N2} -> {sum N1 N2 N3} ->
    {is_nat N3}.
induction on 1. intros. case H1.
  case H3. search.
  case H3. apply IH to H4 H2 H5. search.



Define ctx : olist -> olist -> prop by
  ctx nil nil;
  nabla x, ctx (of x T :: G) (size x z :: H) := ctx G H.


Theorem ctx_invert1 : forall G H E,
  ctx G H -> member E G ->
    exists X T, E = of X T /\ is_name X /\ member (size X z) H.
induction on 1. intros. case H1.
  case H2.
  case H2.
    search.
    apply IH to H3 H4. search.

Theorem ctx_invert2: forall G H E,
  ctx G H -> member E H ->
    exists X, E = size X z /\ is_name X.
induction on 1. intros. case H1.
  case H2.
  case H2.
    search.
    apply IH to H3 H4. search.
  

Theorem sum!size : forall G H N1 N2 N3,
  ctx G H -> {H |- sum N1 N2 N3} ->
    {sum N1 N2 N3}.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.
  apply ctx_invert2 to H1 H4. case H3.


Theorem size_nat : forall G H M N,
  ctx G H -> {H |- size M N} ->
    {is_nat N}.
induction on 2. intros. case H2.
  search.
  apply IH to H1 H3. search.
  apply IH to _ H3. search.
  apply IH to H1 H3. apply IH to H1 H4. apply sum!size to H1 H5. %\
      apply sum_nat to H6 H7 H8. search.
  apply ctx_invert2 to H1 H4. case H3. search.


Theorem size_exists : forall G H M T,
  ctx G H -> {G |- of M T} -> 
    exists N, {H |- size M N}.
induction on 2. intros Ctx Dof. Sub : case Dof.
  search.
  apply IH to Ctx Sub. search.
  apply IH to _ Sub. search.
  apply IH to Ctx Sub. apply IH to Ctx Sub1. apply size_nat to _ H1. %\
      apply sum_exists to H3 with N2 = N1. search.
  apply ctx_invert1 to Ctx Sub1. case Sub. search.

Theorem size_unique : forall G H M N N',
  ctx G H -> {H |- size M N} -> {H |- size M N'} ->
    N = N'.
induction on 2. intros. case H2.
  case H3.
    search.
    apply ctx_invert2 to H1 H5. case H4. case H6.
  case H3.
    apply IH to H1 H4 H5. search.
    apply ctx_invert2 to H1 H6. case H5. case H7.
  case H3.
    apply IH to _ H4 H5. search. 
    apply ctx_invert2 to H1 H6. case H5. case H7.
  case H3.
    apply IH to H1 H4 H7. apply IH to H1 H5 H8. %\
        apply sum!size to H1 H6. apply sum!size to H1 H9. %\
        apply sum_unique to H10 H11. search.
    apply ctx_invert2 to H1 H8. case H7. case H9.
  apply ctx_invert2 to H1 H5. case H4. case H6. case H3. %\
      apply ctx_invert2 to H1 H8. case H7. search.
   
  